import numpy as np
import matplotlib.pyplot as plt
import math
import mpl_toolkits.mplot3d

from gaussion_mixture import gaussion_mixture

x, y = np.mgrid[40:40.95799336338653:200j, -74.55605535507202:-73.22021007577132:200j]
ax = plt.subplot(111, projection='3d')

z1 = (1 / 4 * math.pi * 6.99288322e-02 * 6.38395527e-02) * np.exp(-(
        (x - 40.55031223) ** 2 / (4 * 6.99288322e-02 ** 2) + (y + 73.75001149) ** 2 / (
        4 * 6.38395527e-02 ** 2)))
z3 = (1 / 4 * math.pi * 6.48388309e-02 * 6.40189273e-02) * np.exp(-(
        (x - 40.3102588) ** 2 / (4 * 6.48388309e-02 ** 2) + (y + 73.88027001) ** 2 / (
        4 * 6.40189273e-02 ** 2)))
z = 0.25 * z1 + z3 * 0.2
ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='rainbow', alpha=0.9)  # 绘面
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()

# c = np.linspace(40.10, 40.95799336338653, 100)
# d = np.linspace(-74.55605535507202, -73.22021007577132, 100)
# c, d = np.meshgrid(c, d)
# z1 = (1 / 4 * math.pi * 6.99288322e-02 * 6.38395527e-02) * np.exp(-(
#         (c - 40.55031223) ** 2 / (4 * 6.99288322e-02 ** 2) + (d + 73.75001149) ** 2 / (
#         4 * 6.38395527e-02 ** 2)))
# z3 = (1 / 2 * math.pi * 6.48388309e-02 * 6.40189273e-02) * np.exp(-(
#         (c - 40.3102588) ** 2 / (4 * 6.48388309e-02 ** 2) + (d + 73.88027001) ** 2 / (
#         4 * 6.40189273e-02 ** 2)))
# z = 0.35 * z1 + z3 * 0.2
#
# # 生成x,y的数据
# c = np.linspace(40.10, 40.95799336338653, 100)
# d = np.linspace(-74.55605535507202, -73.22021007577132, 100)
#
# # 把x,y数据生成mesh网格状的数据，因为等高线的显示是在网格的基础上添加上高度值
# X, Y = np.meshgrid(c, d)
# m = [40.439, 40.441, 40.185, 40.321, 40.382, 40.283, 40.396, 40.263, 40.204, 40.254,
#      40.263, 40.226, 40.396, 40.368, 40.242, 40.2062, 40.2193,
#      40.2392, 40.380, 40.3850, 40.363, 40.3389, 40.3575, 40.3565, 40.636, 40.590,
#      40.584, 40.545, 40.704, 40.500, 40.517, 40.543, 40.548, 40.422, 40.434,
#      40.551, 40.660, 40.584, 40.581, 40.603, 40.629, 40.308, 40.299,
#      40.3, 40.303, 40.304, 40.305, 40.301, 40.302, 40.306, 40.305, 40.303, 40.323,
#      40.316, 40.289, 40.294, 40.506, 40.496, 40.603, 40.682, 40.545, 40.552, 40.554, 40.537, 40.568, 40.546, 40.559]
# n = [-73.822, -73.811, -73.945, -73.865, -73.981, -74.035, -73.847, -73.890, -73.854, -73.785,
#      -73.890, -73.847, -73.818, -73.785, -73.899, -73.952, -73.966,
#      -74.007, -73.858, -73.880, -73.920, -73.990, -74.009, -74.043, -73.710, -73.829,
#      -73.908, -73.926, -73.832, -73.749, -73.829, -73.851, -73.879, -73.728, -73.876,
#       -73.666, -73.789, -73.742, -73.692, -73.634, -73.804, -73.878,  -73.888,
#      -73.879, -73.878, -73.882, -73.876, -73.877, -73.972, -73.894, -73.896, -73.842, -73.902,
#      -73.910, -73.864, -73.917, -73.792, -73.667, -73.671, -73.728, -73.747, -73.766, -73.792, -73.72, -73.777, -73.766, -73.777]
# # 填充等高线
# # plt.contourf(X, Y, z, 10,  cmap=plt.cm.hot)
# # 添加等高线
# print(len(m))
# plt.xlim(40.1, 41)
# plt.ylim(-74.6, -73.2)
# plt.plot(m, n, 'r.')
# plt.contour(X, Y, z, 12)
# # 显示图表
# plt.show()
